---
type Props = {
    value: string;
    label: string;
};

const { value, label } = Astro.props;
// Extract numeric part and suffix for animation
const numericMatch = value.match(/([0-9.]+)([^0-9.]*)/);
const numericValue = numericMatch ? parseFloat(numericMatch[1]) : 0;
const suffix = numericMatch ? numericMatch[2] : "";
---

<div class="flex flex-col items-center text-center md:items-start md:text-left mb-4 md:mb-0">
    <p class="text-3xl sm:text-4xl md:text-5xl font-bold text-black dark:text-white">
        <span class="counter-value" data-value={numericValue} data-suffix={suffix}>0{suffix}</span>
    </p>
    <p class="text-sm sm:text-base md:text-lg text-black dark:text-white mt-1">{label}</p>
</div>

<script>
    // Counter animation function with type safety
    function animateCounter(
        element: HTMLElement, 
        targetValue: number, 
        suffix: string, 
        duration: number = 2000
    ): void {
        let startTime: number | null = null;
        const startValue: number = 0;
        const decimalPlaces: number = String(targetValue).includes('.') ? 
            String(targetValue).split('.')[1].length : 0;
            
        function step(timestamp: number): void {
            if (!startTime) startTime = timestamp;
            const progress: number = Math.min((timestamp - startTime) / duration, 1);
            const easeProgress: number = progress === 1 ? 1 : 1 - Math.pow(2, -10 * progress);
            const currentValue: number = startValue + (targetValue - startValue) * easeProgress;
            
            element.textContent = currentValue.toFixed(decimalPlaces) + suffix;
            
            if (progress < 1) {
                window.requestAnimationFrame(step);
            }
        }
        
        window.requestAnimationFrame(step);
    }

    // Function to initialize counters
    function initializeCounters(): void {
        const counters: NodeListOf<HTMLElement> = document.querySelectorAll('.counter-value');
        const observer: IntersectionObserver = new IntersectionObserver((entries: IntersectionObserverEntry[]): void => {
            entries.forEach((entry: IntersectionObserverEntry): void => {
                if (entry.isIntersecting) {
                    const element = entry.target as HTMLElement;
                    const dataValue = element.getAttribute('data-value');
                    const dataSuffix = element.getAttribute('data-suffix');
                    
                    if (dataValue !== null) {
                        const targetValue: number = parseFloat(dataValue);
                        const suffix: string = dataSuffix || '';
                        
                        animateCounter(element, targetValue, suffix);
                        observer.unobserve(element); // Only animate once
                    }
                }
            });
        }, {
            threshold: 0.1 // Trigger when at least 10% of the element is visible
        });
        
        // Observe all counter elements
        counters.forEach((counter: HTMLElement): void => {
            observer.observe(counter);
        });
    }

    // Try to use Astro's page-load event for View Transitions (works in Astro 2.9+)
    if (document.addEventListener) {
        document.addEventListener('astro:page-load', initializeCounters);
    }
    
    // Fallback for older Astro versions or if View Transitions are not enabled
    if (!import.meta.env.DEV || !document.body.hasAttribute('data-astro-transition')) {
        document.addEventListener('DOMContentLoaded', initializeCounters);
        window.addEventListener('popstate', initializeCounters);
    }
</script>
